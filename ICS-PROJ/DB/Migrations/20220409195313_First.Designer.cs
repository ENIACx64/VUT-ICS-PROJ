// <auto-generated />
using System;
using DB.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20220409195313_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DB.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserEntityID");

                    b.ToTable("CarEntities");
                });

            modelBuilder.Entity("DB.Entities.RideEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfDeparture")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CarEntityID");

                    b.HasIndex("DriverID");

                    b.ToTable("RideEntities");
                });

            modelBuilder.Entity("DB.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.Property<Guid>("PassengerRidesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassengersID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PassengerRidesID", "PassengersID");

                    b.HasIndex("PassengersID");

                    b.ToTable("RideEntityUserEntity");
                });

            modelBuilder.Entity("DB.Entities.CarEntity", b =>
                {
                    b.HasOne("DB.Entities.UserEntity", null)
                        .WithMany("OwnedCars")
                        .HasForeignKey("UserEntityID");
                });

            modelBuilder.Entity("DB.Entities.RideEntity", b =>
                {
                    b.HasOne("DB.Entities.CarEntity", null)
                        .WithMany("Rides")
                        .HasForeignKey("CarEntityID");

                    b.HasOne("DB.Entities.UserEntity", "Driver")
                        .WithMany("DriverRides")
                        .HasForeignKey("DriverID");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.HasOne("DB.Entities.RideEntity", null)
                        .WithMany()
                        .HasForeignKey("PassengerRidesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("PassengersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Entities.CarEntity", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("DB.Entities.UserEntity", b =>
                {
                    b.Navigation("DriverRides");

                    b.Navigation("OwnedCars");
                });
#pragma warning restore 612, 618
        }
    }
}
